// Code generated by protoc-gen-go. DO NOT EDIT.
// source: av-cli.proto

package avcli

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ID) Reset()         { *m = ID{} }
func (m *ID) String() string { return proto.CompactTextString(m) }
func (*ID) ProtoMessage()    {}
func (*ID) Descriptor() ([]byte, []int) {
	return fileDescriptor_48a402e0ab4cf43b, []int{0}
}

func (m *ID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ID.Unmarshal(m, b)
}
func (m *ID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ID.Marshal(b, m, deterministic)
}
func (m *ID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ID.Merge(m, src)
}
func (m *ID) XXX_Size() int {
	return xxx_messageInfo_ID.Size(m)
}
func (m *ID) XXX_DiscardUnknown() {
	xxx_messageInfo_ID.DiscardUnknown(m)
}

var xxx_messageInfo_ID proto.InternalMessageInfo

func (m *ID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SwabResult struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SwabResult) Reset()         { *m = SwabResult{} }
func (m *SwabResult) String() string { return proto.CompactTextString(m) }
func (*SwabResult) ProtoMessage()    {}
func (*SwabResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_48a402e0ab4cf43b, []int{1}
}

func (m *SwabResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SwabResult.Unmarshal(m, b)
}
func (m *SwabResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SwabResult.Marshal(b, m, deterministic)
}
func (m *SwabResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwabResult.Merge(m, src)
}
func (m *SwabResult) XXX_Size() int {
	return xxx_messageInfo_SwabResult.Size(m)
}
func (m *SwabResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SwabResult.DiscardUnknown(m)
}

var xxx_messageInfo_SwabResult proto.InternalMessageInfo

func (m *SwabResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SwabResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type FloatResult struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FloatResult) Reset()         { *m = FloatResult{} }
func (m *FloatResult) String() string { return proto.CompactTextString(m) }
func (*FloatResult) ProtoMessage()    {}
func (*FloatResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_48a402e0ab4cf43b, []int{2}
}

func (m *FloatResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FloatResult.Unmarshal(m, b)
}
func (m *FloatResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FloatResult.Marshal(b, m, deterministic)
}
func (m *FloatResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FloatResult.Merge(m, src)
}
func (m *FloatResult) XXX_Size() int {
	return xxx_messageInfo_FloatResult.Size(m)
}
func (m *FloatResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FloatResult.DiscardUnknown(m)
}

var xxx_messageInfo_FloatResult proto.InternalMessageInfo

func (m *FloatResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *FloatResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type ScreenshotResult struct {
	Photo                []byte   `protobuf:"bytes,1,opt,name=photo,proto3" json:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScreenshotResult) Reset()         { *m = ScreenshotResult{} }
func (m *ScreenshotResult) String() string { return proto.CompactTextString(m) }
func (*ScreenshotResult) ProtoMessage()    {}
func (*ScreenshotResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_48a402e0ab4cf43b, []int{3}
}

func (m *ScreenshotResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScreenshotResult.Unmarshal(m, b)
}
func (m *ScreenshotResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScreenshotResult.Marshal(b, m, deterministic)
}
func (m *ScreenshotResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScreenshotResult.Merge(m, src)
}
func (m *ScreenshotResult) XXX_Size() int {
	return xxx_messageInfo_ScreenshotResult.Size(m)
}
func (m *ScreenshotResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ScreenshotResult.DiscardUnknown(m)
}

var xxx_messageInfo_ScreenshotResult proto.InternalMessageInfo

func (m *ScreenshotResult) GetPhoto() []byte {
	if m != nil {
		return m.Photo
	}
	return nil
}

type DuplicateRoomRequest struct {
	FromID               string   `protobuf:"bytes,1,opt,name=fromID,proto3" json:"fromID,omitempty"`
	ToID                 string   `protobuf:"bytes,2,opt,name=toID,proto3" json:"toID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DuplicateRoomRequest) Reset()         { *m = DuplicateRoomRequest{} }
func (m *DuplicateRoomRequest) String() string { return proto.CompactTextString(m) }
func (*DuplicateRoomRequest) ProtoMessage()    {}
func (*DuplicateRoomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_48a402e0ab4cf43b, []int{4}
}

func (m *DuplicateRoomRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DuplicateRoomRequest.Unmarshal(m, b)
}
func (m *DuplicateRoomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DuplicateRoomRequest.Marshal(b, m, deterministic)
}
func (m *DuplicateRoomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DuplicateRoomRequest.Merge(m, src)
}
func (m *DuplicateRoomRequest) XXX_Size() int {
	return xxx_messageInfo_DuplicateRoomRequest.Size(m)
}
func (m *DuplicateRoomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DuplicateRoomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DuplicateRoomRequest proto.InternalMessageInfo

func (m *DuplicateRoomRequest) GetFromID() string {
	if m != nil {
		return m.FromID
	}
	return ""
}

func (m *DuplicateRoomRequest) GetToID() string {
	if m != nil {
		return m.ToID
	}
	return ""
}

func init() {
	proto.RegisterType((*ID)(nil), "avcli.ID")
	proto.RegisterType((*SwabResult)(nil), "avcli.SwabResult")
	proto.RegisterType((*FloatResult)(nil), "avcli.FloatResult")
	proto.RegisterType((*ScreenshotResult)(nil), "avcli.ScreenshotResult")
	proto.RegisterType((*DuplicateRoomRequest)(nil), "avcli.DuplicateRoomRequest")
}

func init() { proto.RegisterFile("av-cli.proto", fileDescriptor_48a402e0ab4cf43b) }

var fileDescriptor_48a402e0ab4cf43b = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xd1, 0x4e, 0xf2, 0x40,
	0x10, 0x85, 0x69, 0x43, 0x49, 0x98, 0x9f, 0xdf, 0xe8, 0xa4, 0x41, 0x02, 0x37, 0x66, 0xaf, 0x88,
	0x89, 0x8b, 0x81, 0x27, 0x50, 0x2b, 0x49, 0x6f, 0xcb, 0x13, 0x94, 0xb2, 0xc0, 0x26, 0x8b, 0x53,
	0xb7, 0xdb, 0x1a, 0x1f, 0xd5, 0xb7, 0x31, 0xdd, 0x6e, 0xb5, 0x12, 0x6f, 0xbc, 0x9b, 0x99, 0x3d,
	0x67, 0x27, 0xdf, 0x1c, 0x18, 0xa5, 0xd5, 0x5d, 0xa6, 0x24, 0xcf, 0x35, 0x19, 0xc2, 0x20, 0xad,
	0x32, 0x25, 0xa7, 0xb3, 0x03, 0xd1, 0x41, 0x89, 0x85, 0x1d, 0x6e, 0xcb, 0xfd, 0x42, 0x9c, 0x72,
	0xf3, 0xde, 0x68, 0x58, 0x08, 0x7e, 0x1c, 0xe1, 0x05, 0xf8, 0x72, 0x37, 0xf1, 0x6e, 0xbc, 0xf9,
	0x30, 0xf1, 0xe5, 0x8e, 0x2d, 0x01, 0x36, 0x6f, 0xe9, 0x36, 0x11, 0x45, 0xa9, 0xcc, 0xf9, 0x2b,
	0x86, 0x10, 0x08, 0xad, 0x49, 0x4f, 0x7c, 0x3b, 0x6a, 0x1a, 0xb6, 0x82, 0x7f, 0x6b, 0x45, 0xa9,
	0xf9, 0x93, 0x69, 0x0e, 0x97, 0x9b, 0x4c, 0x0b, 0xf1, 0x52, 0x1c, 0xa9, 0x75, 0x86, 0x10, 0xe4,
	0x47, 0x32, 0x64, 0xcd, 0xa3, 0xa4, 0x69, 0xd8, 0x23, 0x84, 0x51, 0x99, 0x2b, 0x99, 0xa5, 0x46,
	0x24, 0x44, 0xa7, 0x44, 0xbc, 0x96, 0xa2, 0x30, 0x38, 0x86, 0xc1, 0x5e, 0xd3, 0x29, 0x8e, 0xdc,
	0x2e, 0xd7, 0x21, 0x42, 0xdf, 0x50, 0x1c, 0xb9, 0x75, 0xb6, 0x5e, 0x7e, 0x78, 0x10, 0x3c, 0x54,
	0x4f, 0x4a, 0xe2, 0x1c, 0xfa, 0x35, 0x20, 0x0e, 0xb9, 0xbd, 0x11, 0x8f, 0xa3, 0xe9, 0x95, 0x2b,
	0xbf, 0xc1, 0x59, 0xef, 0xde, 0xc3, 0x5b, 0x08, 0x2c, 0x56, 0x57, 0x8a, 0xae, 0xec, 0xf0, 0x5a,
	0x6d, 0x7d, 0xb6, 0x2f, 0x9a, 0xae, 0xe1, 0xba, 0xfd, 0xfb, 0x8c, 0x95, 0xf5, 0x70, 0x0d, 0xff,
	0x7f, 0x70, 0xe1, 0xcc, 0x69, 0x7f, 0xa3, 0x9d, 0x8e, 0x79, 0x13, 0x26, 0x6f, 0xc3, 0xe4, 0xcf,
	0x75, 0x98, 0xac, 0xb7, 0x1d, 0xd8, 0xc9, 0xea, 0x33, 0x00, 0x00, 0xff, 0xff, 0xb2, 0xd3, 0x29,
	0x44, 0x03, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AvCliClient is the client API for AvCli service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AvCliClient interface {
	Swab(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_SwabClient, error)
	Float(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_FloatClient, error)
	Screenshot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ScreenshotResult, error)
	DuplicateRoom(ctx context.Context, in *DuplicateRoomRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type avCliClient struct {
	cc *grpc.ClientConn
}

func NewAvCliClient(cc *grpc.ClientConn) AvCliClient {
	return &avCliClient{cc}
}

func (c *avCliClient) Swab(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_SwabClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AvCli_serviceDesc.Streams[0], "/avcli.AvCli/Swab", opts...)
	if err != nil {
		return nil, err
	}
	x := &avCliSwabClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AvCli_SwabClient interface {
	Recv() (*SwabResult, error)
	grpc.ClientStream
}

type avCliSwabClient struct {
	grpc.ClientStream
}

func (x *avCliSwabClient) Recv() (*SwabResult, error) {
	m := new(SwabResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *avCliClient) Float(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_FloatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AvCli_serviceDesc.Streams[1], "/avcli.AvCli/Float", opts...)
	if err != nil {
		return nil, err
	}
	x := &avCliFloatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AvCli_FloatClient interface {
	Recv() (*FloatResult, error)
	grpc.ClientStream
}

type avCliFloatClient struct {
	grpc.ClientStream
}

func (x *avCliFloatClient) Recv() (*FloatResult, error) {
	m := new(FloatResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *avCliClient) Screenshot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ScreenshotResult, error) {
	out := new(ScreenshotResult)
	err := c.cc.Invoke(ctx, "/avcli.AvCli/Screenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avCliClient) DuplicateRoom(ctx context.Context, in *DuplicateRoomRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/avcli.AvCli/DuplicateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvCliServer is the server API for AvCli service.
type AvCliServer interface {
	Swab(*ID, AvCli_SwabServer) error
	Float(*ID, AvCli_FloatServer) error
	Screenshot(context.Context, *ID) (*ScreenshotResult, error)
	DuplicateRoom(context.Context, *DuplicateRoomRequest) (*empty.Empty, error)
}

// UnimplementedAvCliServer can be embedded to have forward compatible implementations.
type UnimplementedAvCliServer struct {
}

func (*UnimplementedAvCliServer) Swab(req *ID, srv AvCli_SwabServer) error {
	return status.Errorf(codes.Unimplemented, "method Swab not implemented")
}
func (*UnimplementedAvCliServer) Float(req *ID, srv AvCli_FloatServer) error {
	return status.Errorf(codes.Unimplemented, "method Float not implemented")
}
func (*UnimplementedAvCliServer) Screenshot(ctx context.Context, req *ID) (*ScreenshotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Screenshot not implemented")
}
func (*UnimplementedAvCliServer) DuplicateRoom(ctx context.Context, req *DuplicateRoomRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateRoom not implemented")
}

func RegisterAvCliServer(s *grpc.Server, srv AvCliServer) {
	s.RegisterService(&_AvCli_serviceDesc, srv)
}

func _AvCli_Swab_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AvCliServer).Swab(m, &avCliSwabServer{stream})
}

type AvCli_SwabServer interface {
	Send(*SwabResult) error
	grpc.ServerStream
}

type avCliSwabServer struct {
	grpc.ServerStream
}

func (x *avCliSwabServer) Send(m *SwabResult) error {
	return x.ServerStream.SendMsg(m)
}

func _AvCli_Float_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AvCliServer).Float(m, &avCliFloatServer{stream})
}

type AvCli_FloatServer interface {
	Send(*FloatResult) error
	grpc.ServerStream
}

type avCliFloatServer struct {
	grpc.ServerStream
}

func (x *avCliFloatServer) Send(m *FloatResult) error {
	return x.ServerStream.SendMsg(m)
}

func _AvCli_Screenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvCliServer).Screenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avcli.AvCli/Screenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvCliServer).Screenshot(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvCli_DuplicateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvCliServer).DuplicateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avcli.AvCli/DuplicateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvCliServer).DuplicateRoom(ctx, req.(*DuplicateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AvCli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "avcli.AvCli",
	HandlerType: (*AvCliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Screenshot",
			Handler:    _AvCli_Screenshot_Handler,
		},
		{
			MethodName: "DuplicateRoom",
			Handler:    _AvCli_DuplicateRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Swab",
			Handler:       _AvCli_Swab_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Float",
			Handler:       _AvCli_Float_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "av-cli.proto",
}
