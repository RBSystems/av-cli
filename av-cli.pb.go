// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: av-cli.proto

package avcli

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_av_cli_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_av_cli_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_av_cli_proto_rawDescGZIP(), []int{0}
}

func (x *ID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SwabResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SwabResult) Reset() {
	*x = SwabResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_av_cli_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwabResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwabResult) ProtoMessage() {}

func (x *SwabResult) ProtoReflect() protoreflect.Message {
	mi := &file_av_cli_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwabResult.ProtoReflect.Descriptor instead.
func (*SwabResult) Descriptor() ([]byte, []int) {
	return file_av_cli_proto_rawDescGZIP(), []int{1}
}

func (x *SwabResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SwabResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FloatResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FloatResult) Reset() {
	*x = FloatResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_av_cli_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatResult) ProtoMessage() {}

func (x *FloatResult) ProtoReflect() protoreflect.Message {
	mi := &file_av_cli_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatResult.ProtoReflect.Descriptor instead.
func (*FloatResult) Descriptor() ([]byte, []int) {
	return file_av_cli_proto_rawDescGZIP(), []int{2}
}

func (x *FloatResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FloatResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type ScreenshotResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Photo []byte `protobuf:"bytes,1,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (x *ScreenshotResult) Reset() {
	*x = ScreenshotResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_av_cli_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenshotResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenshotResult) ProtoMessage() {}

func (x *ScreenshotResult) ProtoReflect() protoreflect.Message {
	mi := &file_av_cli_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenshotResult.ProtoReflect.Descriptor instead.
func (*ScreenshotResult) Descriptor() ([]byte, []int) {
	return file_av_cli_proto_rawDescGZIP(), []int{3}
}

func (x *ScreenshotResult) GetPhoto() []byte {
	if x != nil {
		return x.Photo
	}
	return nil
}

type DuplicateRoomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromID string `protobuf:"bytes,1,opt,name=fromID,proto3" json:"fromID,omitempty"`
	ToID   string `protobuf:"bytes,2,opt,name=toID,proto3" json:"toID,omitempty"`
}

func (x *DuplicateRoomRequest) Reset() {
	*x = DuplicateRoomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_av_cli_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DuplicateRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DuplicateRoomRequest) ProtoMessage() {}

func (x *DuplicateRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_av_cli_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DuplicateRoomRequest.ProtoReflect.Descriptor instead.
func (*DuplicateRoomRequest) Descriptor() ([]byte, []int) {
	return file_av_cli_proto_rawDescGZIP(), []int{4}
}

func (x *DuplicateRoomRequest) GetFromID() string {
	if x != nil {
		return x.FromID
	}
	return ""
}

func (x *DuplicateRoomRequest) GetToID() string {
	if x != nil {
		return x.ToID
	}
	return ""
}

var File_av_cli_proto protoreflect.FileDescriptor

var file_av_cli_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x76, 0x2d, 0x63, 0x6c, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x61, 0x76, 0x63, 0x6c, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a, 0x0a, 0x53, 0x77, 0x61, 0x62,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x0b,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x28, 0x0a, 0x10, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x14, 0x44,
	0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x6f, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x49, 0x44, 0x32,
	0xd9, 0x01, 0x0a, 0x05, 0x41, 0x76, 0x43, 0x6c, 0x69, 0x12, 0x28, 0x0a, 0x04, 0x53, 0x77, 0x61,
	0x62, 0x12, 0x09, 0x2e, 0x61, 0x76, 0x63, 0x6c, 0x69, 0x2e, 0x49, 0x44, 0x1a, 0x11, 0x2e, 0x61,
	0x76, 0x63, 0x6c, 0x69, 0x2e, 0x53, 0x77, 0x61, 0x62, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x2a, 0x0a, 0x05, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x09, 0x2e, 0x61,
	0x76, 0x63, 0x6c, 0x69, 0x2e, 0x49, 0x44, 0x1a, 0x12, 0x2e, 0x61, 0x76, 0x63, 0x6c, 0x69, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x32, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x09, 0x2e,
	0x61, 0x76, 0x63, 0x6c, 0x69, 0x2e, 0x49, 0x44, 0x1a, 0x17, 0x2e, 0x61, 0x76, 0x63, 0x6c, 0x69,
	0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x44, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x6d, 0x12, 0x1b, 0x2e, 0x61, 0x76, 0x63, 0x6c, 0x69, 0x2e, 0x44, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_av_cli_proto_rawDescOnce sync.Once
	file_av_cli_proto_rawDescData = file_av_cli_proto_rawDesc
)

func file_av_cli_proto_rawDescGZIP() []byte {
	file_av_cli_proto_rawDescOnce.Do(func() {
		file_av_cli_proto_rawDescData = protoimpl.X.CompressGZIP(file_av_cli_proto_rawDescData)
	})
	return file_av_cli_proto_rawDescData
}

var file_av_cli_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_av_cli_proto_goTypes = []interface{}{
	(*ID)(nil),                   // 0: avcli.ID
	(*SwabResult)(nil),           // 1: avcli.SwabResult
	(*FloatResult)(nil),          // 2: avcli.FloatResult
	(*ScreenshotResult)(nil),     // 3: avcli.ScreenshotResult
	(*DuplicateRoomRequest)(nil), // 4: avcli.DuplicateRoomRequest
	(*empty.Empty)(nil),          // 5: google.protobuf.Empty
}
var file_av_cli_proto_depIdxs = []int32{
	0, // 0: avcli.AvCli.Swab:input_type -> avcli.ID
	0, // 1: avcli.AvCli.Float:input_type -> avcli.ID
	0, // 2: avcli.AvCli.Screenshot:input_type -> avcli.ID
	4, // 3: avcli.AvCli.DuplicateRoom:input_type -> avcli.DuplicateRoomRequest
	1, // 4: avcli.AvCli.Swab:output_type -> avcli.SwabResult
	2, // 5: avcli.AvCli.Float:output_type -> avcli.FloatResult
	3, // 6: avcli.AvCli.Screenshot:output_type -> avcli.ScreenshotResult
	5, // 7: avcli.AvCli.DuplicateRoom:output_type -> google.protobuf.Empty
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_av_cli_proto_init() }
func file_av_cli_proto_init() {
	if File_av_cli_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_av_cli_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_av_cli_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwabResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_av_cli_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_av_cli_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenshotResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_av_cli_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DuplicateRoomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_av_cli_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_av_cli_proto_goTypes,
		DependencyIndexes: file_av_cli_proto_depIdxs,
		MessageInfos:      file_av_cli_proto_msgTypes,
	}.Build()
	File_av_cli_proto = out.File
	file_av_cli_proto_rawDesc = nil
	file_av_cli_proto_goTypes = nil
	file_av_cli_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AvCliClient is the client API for AvCli service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AvCliClient interface {
	Swab(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_SwabClient, error)
	Float(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_FloatClient, error)
	Screenshot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ScreenshotResult, error)
	DuplicateRoom(ctx context.Context, in *DuplicateRoomRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type avCliClient struct {
	cc grpc.ClientConnInterface
}

func NewAvCliClient(cc grpc.ClientConnInterface) AvCliClient {
	return &avCliClient{cc}
}

func (c *avCliClient) Swab(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_SwabClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AvCli_serviceDesc.Streams[0], "/avcli.AvCli/Swab", opts...)
	if err != nil {
		return nil, err
	}
	x := &avCliSwabClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AvCli_SwabClient interface {
	Recv() (*SwabResult, error)
	grpc.ClientStream
}

type avCliSwabClient struct {
	grpc.ClientStream
}

func (x *avCliSwabClient) Recv() (*SwabResult, error) {
	m := new(SwabResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *avCliClient) Float(ctx context.Context, in *ID, opts ...grpc.CallOption) (AvCli_FloatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AvCli_serviceDesc.Streams[1], "/avcli.AvCli/Float", opts...)
	if err != nil {
		return nil, err
	}
	x := &avCliFloatClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AvCli_FloatClient interface {
	Recv() (*FloatResult, error)
	grpc.ClientStream
}

type avCliFloatClient struct {
	grpc.ClientStream
}

func (x *avCliFloatClient) Recv() (*FloatResult, error) {
	m := new(FloatResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *avCliClient) Screenshot(ctx context.Context, in *ID, opts ...grpc.CallOption) (*ScreenshotResult, error) {
	out := new(ScreenshotResult)
	err := c.cc.Invoke(ctx, "/avcli.AvCli/Screenshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *avCliClient) DuplicateRoom(ctx context.Context, in *DuplicateRoomRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/avcli.AvCli/DuplicateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AvCliServer is the server API for AvCli service.
type AvCliServer interface {
	Swab(*ID, AvCli_SwabServer) error
	Float(*ID, AvCli_FloatServer) error
	Screenshot(context.Context, *ID) (*ScreenshotResult, error)
	DuplicateRoom(context.Context, *DuplicateRoomRequest) (*empty.Empty, error)
}

// UnimplementedAvCliServer can be embedded to have forward compatible implementations.
type UnimplementedAvCliServer struct {
}

func (*UnimplementedAvCliServer) Swab(*ID, AvCli_SwabServer) error {
	return status.Errorf(codes.Unimplemented, "method Swab not implemented")
}
func (*UnimplementedAvCliServer) Float(*ID, AvCli_FloatServer) error {
	return status.Errorf(codes.Unimplemented, "method Float not implemented")
}
func (*UnimplementedAvCliServer) Screenshot(context.Context, *ID) (*ScreenshotResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Screenshot not implemented")
}
func (*UnimplementedAvCliServer) DuplicateRoom(context.Context, *DuplicateRoomRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DuplicateRoom not implemented")
}

func RegisterAvCliServer(s *grpc.Server, srv AvCliServer) {
	s.RegisterService(&_AvCli_serviceDesc, srv)
}

func _AvCli_Swab_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AvCliServer).Swab(m, &avCliSwabServer{stream})
}

type AvCli_SwabServer interface {
	Send(*SwabResult) error
	grpc.ServerStream
}

type avCliSwabServer struct {
	grpc.ServerStream
}

func (x *avCliSwabServer) Send(m *SwabResult) error {
	return x.ServerStream.SendMsg(m)
}

func _AvCli_Float_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AvCliServer).Float(m, &avCliFloatServer{stream})
}

type AvCli_FloatServer interface {
	Send(*FloatResult) error
	grpc.ServerStream
}

type avCliFloatServer struct {
	grpc.ServerStream
}

func (x *avCliFloatServer) Send(m *FloatResult) error {
	return x.ServerStream.SendMsg(m)
}

func _AvCli_Screenshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvCliServer).Screenshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avcli.AvCli/Screenshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvCliServer).Screenshot(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _AvCli_DuplicateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DuplicateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AvCliServer).DuplicateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/avcli.AvCli/DuplicateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AvCliServer).DuplicateRoom(ctx, req.(*DuplicateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AvCli_serviceDesc = grpc.ServiceDesc{
	ServiceName: "avcli.AvCli",
	HandlerType: (*AvCliServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Screenshot",
			Handler:    _AvCli_Screenshot_Handler,
		},
		{
			MethodName: "DuplicateRoom",
			Handler:    _AvCli_DuplicateRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Swab",
			Handler:       _AvCli_Swab_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Float",
			Handler:       _AvCli_Float_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "av-cli.proto",
}
